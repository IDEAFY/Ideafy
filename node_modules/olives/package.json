{
  "name": "olives",
  "description": "A JS Framework for creating realtime and scalable web applications. Based on Emily.js and socket.io",
  "version": "1.4.2",
  "homepage": "http://flams.github.com/olives/",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/flams/olives/master/LICENSE"
    }
  ],
  "files": [
    "LICENSE",
    "olives-server.js",
    "build"
  ],
  "author": {
    "name": "Olivier Scherrer",
    "email": "pode.fr@gmail.com"
  },
  "contributors": [
    {
      "name": "Olivier Scherrer",
      "email": "pode.fr@gmail.com"
    },
    {
      "name": "Olivier Wietrich"
    }
  ],
  "dependencies": {
    "requirejs": ">=2.1.5",
    "emily": ">=1.3.5",
    "socket.io": ">=0.9.6"
  },
  "keywords": [
    "framework",
    "web",
    "realtime",
    "UI",
    "MVC",
    "scalable",
    "AMD/commonJS"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:flams/olives.git"
  },
  "bugs": {
    "url": "https://github.com/flams/olives/issues"
  },
  "main": "olives-server.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "##What is Olives?\n\n * Olives is a JS MV* framework that helps you create scalable and realtime UIs.\n * It offers a powerful virtualised and double way data binding tool\n * It has an open API for adding custom features via plugins\n * It declaratively attaches behaviour to an HTML template\n * It's based on [Emily](https://github.com/flams/emily) and socket.io to facilitate the communicaton with server side services on node.js\n\nOlives is part of [TodoMVC.com](http://todomvc.com)\n\nExample of a simplified todo list:\n\n```html\n<div class=\"widget\">\n\n\t<div>\n\t\t<!-- Typing something in the input field will trigger the addTask function -->\n\t\t<input type=\"text\" placeholder=\"What's to be done?\" data-event=\"listen: keydown, addTask\">\n\t</div>\n\n\t<div>\n\t\t<table>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>#</td>\n\t\t\t\t\t<th>Task</th>\n\t\t\t\t\t<th>Action</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\n\t\t\t<!-- The data binding plugin will repeat the following template-->\n\t\t\t<tbody data-bind=\"foreach\">\n\t\t\t\t<tr>\n\t\t\t\t\t<!-- The getId function will be called on this td -->\n\t\t\t\t\t<td data-bind=\"bind: getId\">id</td>\n\n\t\t\t\t\t<!-- The innerHTML of this td will be replaced by the value contained in the model\n\t\t\t\t\t\tWe will also add a custom plugin that will change the background of this DOM element -->\n\t\t\t\t\t<td data-bind=\"bind: innerHTML\" data-custom=\"color: lightblue\">Name</td>\n\n\t\t\t\t\t<!-- Clicking on this will trigger the removeTask function -->\n\t\t\t\t\t<td><a href=\"#\" data-event=\"listen: click, removeTask\"><i class=\"icon-remove\"></i></a></td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\n</div>\n```\n\n```js\n// OObject is a container for DOM elements\nvar widget = new OObject();\n\n// List will be our model, it's an array of values\nvar list = new Store( [] );\n\n// We tell the event plugin where to find the methods to call when en event is triggered\nvar event = new Event({\n\n\t// Add task will add a task in the model\n\taddTask: function ( event, node ) {\n\t\tif ( event.keyCode == 13 ) {\n\t\t\tlist.alter( 'push', node.value );\n\t\t\tnode.value = '';\n\t\t}\n\t},\n\n\t// Remove task will remove it\n\tremoveTask: function ( event, node ) {\n\t\tlist.del( node.getAttribute('data-bind_id') );\n\t}\n});\n\n// The data binding plugin needs to know where to find the data\nvar bind = new Bind(list, {\n\n\t// Get id can be an extra formatter\n\tgetId: function ( item ) {\n\t\tthis.innerHTML = list.alter( 'indexOf', item);\n\t}\n});\n\n// I'm adding the plugins to the widget\nwidget.plugins.addAll({\n\n\t// The event plugin will be reachable via data-event attributes\n\t'event': event,\n\n\t// The bind plugin will be reachable via data-bind attributes\n\t'bind': bind,\n\n\t// This is a custom plugin to show how simple it is to extend Olives!\n\t'custom': {\n\t\tcolor: function ( node, color ) {\n\t\t\tnode.style.backgroundColor = color;\n\t\t}\n\t}\n});\n\n// Apply the behaviour to the DOM element selected via CSS selector\nwidget.alive( '.widget' );\n```\n\n\n##How do I install it?\n\nOlives requires an AMD/commonJS compatible loader. I use requirejs: http://requirejs.org/\n\n```html\n\t<script src=\"./require.js\"></script>\n\t<script src=\"./Emily.js\"></script>\n\t<script src=\"./Olives.js\"></script>\n```\n\n```js\nrequire([\"Module\"], function (Module) {\n\t// Do what you want with Module\n});\n```\n\nIf your application is based on node and you want the realtime part of Olives, on the server side, do:\n\n```bash\nnpm install requirejs\nnpm install olives\n```\n\n```js\nvar olives = require(\"olives\");\n\n// Register your instance of socket.io\nolives.registerSocketIO(io);\n```\n\n##Integration tests:\n\n###OObject\n\n```js\ndescribe(\"OObject is a container for DOM elements and a starting point for adding it behaviour\", function () {\n\n\tit(\"can accept DOM elements from an HTML template\", function () {\n\t\tvar oobject = new OObject();\n\n\t\toobject.template = \"<div></div>\";\n\n\t\texpect(oobject.dom).toBe(null);\n\n\t\t// Render will take what's in template and turn it into\n\t\t// DOM elements\n\t\toobject.render();\n\n\t\t// These DOM elements will be accessible via the .dom property\n\t\texpect(oobject.dom).toBeInstanceOf(HTMLElement);\n\t\texpect(oobject.dom.nodeName).toBe(\"DIV\");\n\t});\n\n\tit(\"can accept actual DOM elements\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tdiv = document.createElement(\"div\");\n\n\t\toobject.template = div;\n\n\t\toobject.render();\n\n\t\texpect(oobject.dom).toBe(div);\n\t});\n\n\tit(\"can be rerendered with a new template\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tdiv = document.createElement(\"div\");\n\n\t\toobject.template = div;\n\n\t\toobject.render();\n\n\t\toobject.template = \"<p>\";\n\n\t\toobject.render();\n\n\t\texpect(oobject.dom.nodeName).toBe(\"P\");\n\n\t});\n\n\tit(\"can be placed somewhere in the dom\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tparent = document.createElement(\"div\"),\n\t\t\tchild = document.createElement(\"p\");\n\n\t\toobject.template = child;\n\n\t\toobject.render();\n\n\t\toobject.place(parent);\n\n\t\texpect(parent.childNodes[0]).toBe(child);\n\t});\n\n\tit(\"can be moved around\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tparent1 = document.createElement(\"div\"),\n\t\t\tparent2 = document.createElement(\"div\"),\n\t\t\tparent3 = document.createElement(\"div\"),\n\t\t\tchild = document.createElement(\"p\");\n\n\t\toobject.template = child;\n\n\t\toobject.render();\n\n\t\toobject.place(parent1);\n\t\texpect(parent1.childNodes[0]).toBe(child);\n\n\t\toobject.place(parent2);\n\t\texpect(parent1.childNodes.length).toBe(0);\n\t\texpect(parent2.childNodes[0]).toBe(child);\n\t});\n\n\tit(\"can be placed before an existing dom node\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tparent = document.createElement(\"div\"),\n\t\t\tsibling = document.createElement(\"div\"),\n\t\t\tchild = document.createElement(\"p\");\n\n\t\tparent.appendChild(sibling);\n\n\t\toobject.template = child;\n\n\t\toobject.render();\n\n\t\toobject.place(parent, sibling);\n\n\t\texpect(parent.childNodes[0]).toBe(child);\n\t\texpect(parent.childNodes[1]).toBe(sibling);\n\t});\n\n\tit(\"calls render prior to place if the UI has never been rendered\", function () {\n\t\tvar oobject = new OObject,\n\t\t\tparent = document.createElement(\"div\"),\n\t\t\tchild = document.createElement(\"p\");\n\n\t\toobject.template = child;\n\n\t\toobject.place(parent);\n\n\t\texpect(oobject.dom).toBe(child);\n\t});\n\n\tit(\"should throw an error if trying to render or place an oobject without specifying a template\", function () {\n\t\tvar oobject = new OObject;\n\n\t\texpect(function () {\n\t\t\toobject.render();\n\t\t}).toThrow();\n\t});\n\n\tit(\"add behaviour to the template via plugins\", function () {\n\t\tvar oobject = new OObject();\n\n\t\toobject.template = '<p data-i18n=\"translate: hello\"></p>';\n\t\toobject.plugins.add('i18n', {\n\t\t\ttranslate: function (dom, text) {\n\t\t\t\tif (text == \"hello\") {\n\t\t\t\t\tdom.innerHTML = \"bonjour\";\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\toobject.render();\n\n\t\texpect(oobject.dom.innerHTML).toBe(\"bonjour\");\n\t});\n\n\tit(\"can create and render an OObject from existing DOM elements\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tdom = '<p data-i18n=\"translate: hello\"></p>',\n\t\t\tparent = document.createElement(\"div\");\n\n\t\tparent.innerHTML = dom;\n\t\toobject.plugins.add('i18n', {\n\t\t\ttranslate: function (dom, text) {\n\t\t\t\tif (text == \"hello\") {\n\t\t\t\t\tdom.innerHTML = \"bonjour\";\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\toobject.alive(parent);\n\n\t\texpect(oobject.dom.querySelector(\"p\").innerHTML).toBe(\"bonjour\");\n\t});\n\n\tit(\"can return the current place\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tparent = document.createElement(\"div\"),\n\t\t\tchild = document.createElement(\"p\");\n\n\t\toobject.template = child;\n\n\t\toobject.place(parent);\n\n\t\texpect(oobject.getCurrentPlace()).toBe(parent);\n\t});\n\n});\n```\n\n###Plugins\n\n```js\ndescribe(\"plugins can add behaviour to your HTML\", function () {\n\n\tit(\"has a function for attaching behaviour to the template\", function () {\n\t\tvar plugins = new Plugins(),\n\t\t\tdom = document.createElement(\"div\"),\n\t\t\ttemplate = '<p data-i18n=\"translate: hello\"></p>',\n\t\t\ttranslationMap = {};\n\n\t\ttranslationMap[\"hello\"] = \"bonjour\";\n\n\t\tdom.innerHTML = template;\n\n\t\tplugins.add(\"i18n\", {\n\t\t\ttranslate: function (dom, key) {\n\t\t\t\tdom.innerHTML = translationMap[key];\n\t\t\t}\n\t\t});\n\n\t\tplugins.apply(dom);\n\n\t\texpect(dom.querySelector(\"p\").innerHTML).toBe(\"bonjour\");\n\t});\n\n\tit(\"can apply multiple plugins\", function () {\n\t\tvar plugins = new Plugins(),\n\t\t\tdom = document.createElement(\"div\"),\n\t\t\ttemplate = ('<p data-i18n=\"translate: hello\"> </p> ' +\n\t\t\t\t'<button data-action=\"listen: click, onClick\">Click me</button>'),\n\t\t\ttranslationMap = {},\n\t\t\tactions = {},\n\t\t\tcalled = false;\n\n\t\ttranslationMap[\"hello\"] = \"bonjour\",\n\t\tactions.onClick = function () {\n\t\t\tcalled = true;\n\t\t};\n\n\t\tdom.innerHTML = template;\n\n\t\tplugins.addAll({\n\t\t\t\"i18n\": {\n\t\t\t\ttranslate: function (dom, key) {\n\t\t\t\t\tdom.innerHTML = translationMap[key];\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"action\": {\n\t\t\t\tlisten: function (dom, event, method) {\n\t\t\t\t\tdom.addEventListener(event, actions[method], false);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tplugins.apply(dom);\n\n\t\texpect(dom.querySelector(\"p\").innerHTML).toBe(\"bonjour\");\n\n\t\tdom.querySelector(\"button\").dispatchEvent(CreateMouseEvent(\"click\"));\n\n\t\texpect(called).toBe(true);\n\n\t});\n\n\tit(\"can be initialised with a set of plugins\", function () {\n\t\tvar plugin = {},\n\t\t\tplugins = new Plugins({plugin: plugin});\n\n\t\texpect(plugins.get(\"plugin\")).toBe(plugin);\n\t});\n\n\tit(\"can pass as many arguments to a plugins method as required, and a plugin can have several method\", function () {\n\t\tvar length1,\n\t\t\tlength2,\n\t\t\tlength3,\n\t\t\tplugin = {\n\t\t\t\tmethod1: function (dom, arg1, arg2, arg3) {\n\t\t\t\t\tlength1 = arguments.length;\n\t\t\t\t},\n\t\t\t\tmethod2: function (dom, arg1, arg2, arg3, arg4) {\n\t\t\t\t\tlength2 = arguments.length;\n\t\t\t\t},\n\t\t\t\tmethod3: function (dom, arg1, arg2) {\n\t\t\t\t\tlength3 = arguments.length;\n\t\t\t\t}\n\t\t\t},\n\t\t\tplugins = new Plugins({plugin: plugin}),\n\t\t\tdom = document.createElement(\"div\"),\n\t\t\ttemplate = '<p data-plugin=\"method1: arg1, arg2, arg3; method2: arg1, arg2, arg3, arg4; method3: arg1, arg2\"></p>';\n\n\t\tdom.innerHTML = template;\n\n\t\tplugins.apply(dom);\n\n\t\texpect(length1).toBe(4);\n\t\texpect(length2).toBe(5);\n\t\texpect(length3).toBe(3);\n\t});\n\n});\n```\n\n### Event.plugin\n\n```js\ndescribe(\"Event plugin can bind event listeners to the DOM\", function () {\n\n\tit(\"has a method for adding an event listener to a dom element\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\t// The event plugin must be given an object\n\t\t\t// so it knows where to find the methods to call\n\t\t\teventPlugin = new EventPlugin(oobject),\n\t\t\tcalled = false,\n\t\t\tthisObject;\n\n\t\t// Here we tell the event plugin to listen for the click event\n\t\t// And that when it occurs, it should call onClick\n\t\t// The last parameter tells the phase we want to listen to (propagation == true, bubbling == false)\n\t\toobject.template = '<button data-event=\"listen: click, onClick, true\"></button>';\n\n\t\t// The function that will be called when the dom node is clicked\n\t\toobject.onClick = function () {\n\t\t\tcalled = true;\n\t\t\tthisObject = this;\n\t\t};\n\n\t\t// Add the event plugin to the oobject\n\t\toobject.plugins.add(\"event\", eventPlugin);\n\n\t\toobject.render();\n\n\t\toobject.dom.dispatchEvent(CreateMouseEvent(\"click\"));\n\n\t\texpect(called).toBe(true);\n\t\texpect(thisObject).toBe(oobject);\n\n\t});\n\n\txit(\"can delegate an event for a set of DOM elements to the parent DOM\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\t// The event plugin must be given an object\n\t\t\t// so it knows where to find the methods to call\n\t\t\teventPlugin = new EventPlugin(oobject),\n\t\t\tclickedNode,\n\t\t\tclickEvent = CreateMouseEvent(\"click\");\n\n\t\t// Here we tell the event plugin to listen for the click event\n\t\t// And that when it occurs, it should call onClick\n\t\t// The last parameter tells the phase we want to listen to (propagation == true, bubbling == false)\n\t\toobject.template = '<ul data-event=\"delegate: li, click, onClick, true\">';\n\t\toobject.template +=\t'<li>Item 1</li>';\n\t\toobject.template +=\t'<li>Item 2</li>';\n\t\toobject.template +=\t'<li>Item 3</li>';\n\t\toobject.template +=\t'<li>Item 4</li>';\n\t\toobject.template += '</ul>';\n\n\t\t// The function that will be called when the dom node is clicked\n\t\toobject.onClick = function (event, node) {\n\t\t\tclickedNode = node;\n\t\t};\n\n\t\t// Add the event plugin to the oobject\n\t\toobject.plugins.add(\"event\", eventPlugin);\n\n\t\toobject.render();\n\n\n\t\tclickEvent.target = oobject.dom.querySelectorAll(\"li\")[3];\n\t\toobject.dom.dispatchEvent(clickEvent);\n\n\t\texpect(clickedNode.innerText).toBe(\"Item 4\");\n\t});\n\n});\n```\n\n### Bind.plugin\n\n```js\ndescribe(\"Bind plugin can bind an SVG/HTML template with a Store for two-way binding\", function () {\n\n\tit(\"sets the property of a DOM element to the value set in the store, for a given key\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tstore = new Store(),\n\t\t\tbindPlugin = new BindPlugin(store);\n\n\t\toobject.template = '<p data-bind=\"bind: innerText, name\"></p>';\n\n\t\toobject.plugins.add(\"bind\", bindPlugin);\n\n\t\toobject.render();\n\n\t\tstore.set(\"name\", \"Olives\");\n\n\t\texpect(oobject.dom.innerText).toBe(\"Olives\");\n\n\t\tstore.set(\"name\", \"Emily\");\n\n\t\texpect(oobject.dom.innerText).toBe(\"Emily\");\n\t});\n\n\tit(\"can work with any dom property\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tstore = new Store(),\n\t\t\tbindPlugin = new BindPlugin(store);\n\n\t\toobject.template = '<p data-bind=\"bind: className, level\"></p>';\n\n\t\toobject.plugins.add(\"bind\", bindPlugin);\n\n\t\toobject.render();\n\n\t\tstore.set(\"level\", \"info\");\n\n\t\texpect(oobject.dom.className).toBe(\"info\");\n\n\t\tstore.set(\"level\", \"warning\");\n\n\t\texpect(oobject.dom.className).toBe(\"warning\");\n\t});\n\n\tit(\"can create a new template for each item in a store\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tstore = new Store([]),\n\t\t\tbindPlugin = new BindPlugin(store);\n\n\t\toobject.template = '<ul data-bind=\"foreach\">';\n\t\toobject.template += '<li data-bind=\"bind: innerText\"></li>';\n\t\toobject.template += '</ul>';\n\n\t\toobject.plugins.add(\"bind\", bindPlugin);\n\n\t\toobject.render();\n\n\t\tstore.alter(\"push\", \"Olives\");\n\n\t\texpect(oobject.dom.childNodes.length).toBe(1);\n\t\texpect(oobject.dom.querySelectorAll(\"li\")[0].innerText).toBe(\"Olives\");\n\n\t\tstore.alter(\"push\", \"Emily\");\n\n\t\texpect(oobject.dom.childNodes.length).toBe(2);\n\t\texpect(oobject.dom.querySelectorAll(\"li\")[1].innerText).toBe(\"Emily\");\n\n\t\tstore.alter(\"shift\");\n\n\t\texpect(oobject.dom.childNodes.length).toBe(1);\n\t\texpect(oobject.dom.querySelectorAll(\"li\")[0].innerText).toBe(\"Emily\");\n\t});\n\n\tit(\"can create a new template for more complex items in a store, like an object\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tstore = new Store([]),\n\t\t\tbindPlugin = new BindPlugin(store);\n\n\n\t\toobject.template = '<ul data-bind=\"foreach\">';\n\t\toobject.template += \t'<li>';\n\t\t\t\t\t\t\t\t\t// The className are only useful for querying the dom node for facilitating\n\t\t\t\t\t\t\t\t\t// the understanding of the test\n\t\toobject.template += \t\t'<span class=\"itemName\" data-bind=\"bind: innerText, name\"></span>';\n\t\toobject.template += \t\t'<span class=\"itemType\" data-bind=\"bind: innerText, type\"></span>';\n\t\toobject.template += \t'</li>';\n\t\toobject.template += '</ul>';\n\n\t\toobject.plugins.add(\"bind\", bindPlugin);\n\n\t\toobject.render();\n\n\t\tstore.alter(\"push\", {\n\t\t\tname: \"Olives\",\n\t\t\ttype: \"MVC\"\n\t\t});\n\n\t\texpect(oobject.dom.childNodes.length).toBe(1);\n\t\texpect(oobject.dom.querySelectorAll(\"li .itemName\")[0].innerText).toBe(\"Olives\");\n\t\texpect(oobject.dom.querySelectorAll(\"li .itemType\")[0].innerText).toBe(\"MVC\");\n\n\t\tstore.alter(\"push\", {\n\t\t\tname: \"Emily\",\n\t\t\ttype: \"Library\"\n\t\t})\n\n\t\texpect(oobject.dom.childNodes.length).toBe(2);\n\t\texpect(oobject.dom.querySelectorAll(\"li .itemName\")[1].innerText).toBe(\"Emily\");\n\t\texpect(oobject.dom.querySelectorAll(\"li .itemType\")[1].innerText).toBe(\"Library\");\n\n\t\tstore.alter(\"shift\");\n\n\t\texpect(oobject.dom.childNodes.length).toBe(1);\n\t\texpect(oobject.dom.querySelectorAll(\"li .itemName\")[0].innerText).toBe(\"Emily\");\n\n\t});\n\n\tit(\"can tell the id of an item in the store\", function () {\n\t\tvar oobject = new OObject(),\n\t\t\tstore = new Store([]),\n\t\t\tbindPlugin = new BindPlugin(store);\n\n\t\toobject.template = '<ul data-bind=\"foreach\">';\n\t\toobject.template += '<li data-bind=\"bind: innerText, name\"></li>';\n\t\toobject.template += '</ul>';\n\n\t\toobject.plugins.add(\"bind\", bindPlugin);\n\n\t\toobject.render();\n\n\t\tstore.alter(\"push\", {\n\t\t\tname: \"Olives\"\n\t\t});\n\n\t\tstore.alter(\"push\", {\n\t\t\tname: \"Emily\"\n\t\t});\n\n\t\texpect(bindPlugin.getItemIndex(oobject.dom.querySelectorAll(\"li\")[0])).toBe(0);\n\t\texpect(bindPlugin.getItemIndex(oobject.dom.querySelectorAll(\"li\")[1])).toBe(1);\n\t});\n\n});\n```\n\n### DomUtils\n\n```js\ndescribe(\"DomUtils is a collection of tools for manipulating the dom\", function () {\n\n\tit(\"has a function for getting an element's dataset even if the browser doesn't support the property\", function () {\n\n\t\tvar dom = document.createElement(\"div\");\n\n\t\tdom.innerHTML = '<p data-name=\"Olives\"></p>';\n\n\t\tdataset = DomUtils.getDataset(dom.querySelector(\"p\"));\n\n\t\texpect(dataset.name).toBe(\"Olives\");\n\n\t});\n\n\tit(\"has a function for setting the attribute of both an HTML and an SVG element\", function () {\n\t\tvar htmlElement = document.createElement(\"p\"),\n\t\t\tsvgElement = svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\n\n\t\tDomUtils.setAttribute(svgElement, \"width\", 100);\n\n\t\texpect(svgElement.getAttribute(\"width\")).toBe('100');\n\n\t\tDomUtils.setAttribute(htmlElement, \"innerText\", \"Olives\");\n\n\t\texpect(htmlElement.innerText).toBe(\"Olives\");\n\t});\n\n\tit(\"has a function for getting a DOM node and its siblings\", function () {\n\n\t\tvar parent = document.createElement(\"div\"),\n\t\t\tsibling1 = document.createElement(\"p\"),\n\t\t\tsibling2 = document.createElement(\"p\"),\n\t\t\tsibling3 = document.createElement(\"p\"),\n\t\t\tchild1 = document.createElement(\"span\"),\n\t\t\tchild2 = document.createElement(\"span\"),\n\t\t\tchild3 = document.createElement(\"span\");\n\n\t\tparent.appendChild(sibling1);\n\t\tparent.appendChild(sibling2);\n\t\tparent.appendChild(sibling3);\n\n\t\tsibling1.appendChild(child1);\n\t\tsibling2.appendChild(child2);\n\t\tsibling3.appendChild(child3);\n\n\t\tvar list = toArray(DomUtils.getNodes(sibling2));\n\n\t\texpect(hasItem(list, sibling1)).toBe(true);\n\t\texpect(hasItem(list, sibling2)).toBe(true);\n\t\texpect(hasItem(list, sibling3)).toBe(true);\n\t\texpect(hasItem(list, child1)).toBe(true);\n\t\texpect(hasItem(list, child2)).toBe(true);\n\t\texpect(hasItem(list, child3)).toBe(true);\n\n\t});\n\n\tit(\"can restrict the returns DOM elements to a given CSS selector\", function () {\n\t\tvar parent = document.createElement(\"div\"),\n\t\t\tsibling1 = document.createElement(\"p\"),\n\t\t\tsibling2 = document.createElement(\"p\"),\n\t\t\tsibling3 = document.createElement(\"p\"),\n\t\t\tchild1 = document.createElement(\"span\"),\n\t\t\tchild2 = document.createElement(\"span\"),\n\t\t\tchild3 = document.createElement(\"span\");\n\n\t\tparent.appendChild(sibling1);\n\t\tparent.appendChild(sibling2);\n\t\tparent.appendChild(sibling3);\n\n\t\tsibling1.appendChild(child1);\n\t\tsibling2.appendChild(child2);\n\t\tsibling3.appendChild(child3);\n\n\t\tvar list = toArray(DomUtils.getNodes(sibling2, \"span\"));\n\n\t\texpect(hasItem(list, sibling1)).toBe(false);\n\t\texpect(hasItem(list, sibling2)).toBe(false);\n\t\texpect(hasItem(list, sibling3)).toBe(false);\n\t\texpect(hasItem(list, child1)).toBe(true);\n\t\texpect(hasItem(list, child2)).toBe(true);\n\t\texpect(hasItem(list, child3)).toBe(true);\n\t});\n\n\tit(\"has a function for telling if an a child node matches a given CSS selector\", function () {\n\n\t\tvar parent = document.createElement(\"div\"),\n\t\t\tchild = document.createElement(\"p\");\n\n\t\tparent.appendChild(child);\n\n\t\texpect(DomUtils.matches(parent, \"p\", child)).toBe(true);\n\t\texpect(DomUtils.matches(parent, \"ul\", child)).toBe(false);\n\t\texpect(DomUtils.matches(parent, \"p.text\", child)).toBe(false);\n\n\t});\n\n});\n\n```\n\n### Place.plugin\n\n```js\ndescribe(\"Place.plugin places OObject in the DOM\", function () {\n\n\tit(\"has a function for adding adding an oobject\", function () {\n\t\tvar parentUI = new OObject(),\n\t\t\tchildUI = new OObject(),\n\t\t\tplacePlugin = new PlacePlugin();\n\n\t\tchildUI.template = '<p></p>';\n\n\t\tparentUI.template = '<div data-place=\"place: myUI\"></div>';\n\n\t\tparentUI.plugins.add(\"place\", placePlugin);\n\n\t\tplacePlugin.set(\"myUI\", childUI);\n\n\t\tparentUI.render();\n\n\t\texpect(parentUI.dom.childNodes[0]).toBe(childUI.dom);\n\t});\n\n\tit(\"has a function for adding multiple oobjects, equivalent to calling set multiple times\", function () {\n\t\tvar parentUI = new OObject(),\n\t\t\tchildUI1 = new OObject(),\n\t\t\tchildUI2 = new OObject(),\n\t\t\tplacePlugin = new PlacePlugin();\n\n\t\tchildUI1.template = '<p></p>';\n\t\tchildUI2.template = '<p></p>';\n\n\t\tparentUI.template = '<ul>';\n\t\tparentUI.template += '<li data-place=\"place: myUI1\"></li>';\n\t\tparentUI.template += '<li data-place=\"place: myUI2\"></li>';\n\t\tparentUI.template += '</ul>';\n\n\t\tparentUI.plugins.add(\"place\", placePlugin);\n\n\t\tplacePlugin.setAll({\n\t\t\t\"myUI1\": childUI1,\n\t\t\t\"myUI2\": childUI2\n\t\t});\n\n\t\tparentUI.render();\n\n\t\texpect(parentUI.dom.querySelectorAll(\"p\")[0]).toBe(childUI1.dom);\n\t\texpect(parentUI.dom.querySelectorAll(\"p\")[1]).toBe(childUI2.dom);\n\t});\n\n});\n```\n\n### LocalStore\n\n```js\ndescribe(\"LocalStore is an Emily store which can be synchronized with localStorage\", function () {\n\n\tit(\"can be initialised like an Emily Store\", function () {\n\t\tvar store = new LocalStore({\n\t\t\tname: \"Olives\",\n\t\t\ttype: \"MVC\"\n\t\t});\n\n\t\texpect(store.get(\"type\")).toBe(\"MVC\");\n\t});\n\n\tit(\"can be synchronized with localStorage\", function () {\n\t\tvar store = new LocalStore({\n\t\t\tname: \"Olives\",\n\t\t\ttype: \"MVC\"\n\t\t});\n\n\t\t// the store is now persisted in localStorage\n\t\tstore.sync(\"OlivesStore\");\n\t});\n\n\tit(\"can reload data from localStorage\", function () {\n\t\tvar store = new LocalStore();\n\n\t\tstore.sync(\"OlivesStore\");\n\n\t\texpect(store.get(\"name\")).toBe(\"Olives\");\n\t});\n\n});\n```\n\n### SocketIOTransport\n\n```js\ndescribe(\"SocketIOTransport wraps socket.io to issue requests and listen to Olives channels from a node.js server\", function () {\n\n\txit(\"[SERVER SIDE] has a function for adding an Olives handler\", function () {\n\t\tvar olives = require(\"olives\");\n\n\t\t// socket is the socket created by socket.io, listening to the web server\n\t\tolives.registerSocketIO(socket);\n\n\t\tolives.handlers.set(\"myHandler\", function (payload, onEnd, onData) {\n\n\t\t\t// payload comes from the client and holds data needed to issue the request\n\t\t\t// It can be of any type\n\n\t\t\t// Call onEnd when you want to send something to the client that will close the connection\n\t\t\tonEnd(data);\n\n\t\t\t// Call onData if it's a chunk and that more are coming, so the connection stays alive\n\t\t\tonData(data);\n\n\t\t});\n\t});\n\n\txit(\"can issue a request to a handler on the server side\", function () {\n\t\tvar transport = new SocketIOTransport(fakeSocket);\n\n\t\t// The payload can be any type, or a JSON\n\t\tvar payload = {};\n\n\t\ttransport.request(\"myHandler\", payload, function callback(data) {\n\t\t\t// Do what you want with data\n\t\t});\n\t});\n\n\txit(\"can listen to a kept-alive socket\", function () {\n\t\tvar transport = new SocketIOTransport(fakeSocket);\n\n\t\t// The payload can be any type, or a JSON\n\t\tvar payload = {};\n\n\t\tvar stop = transport.listen(\"myHandler\", payload, function callback(data) {\n\t\t\t// Do what you want with data\n\t\t});\n\n\t\t// Stop can be called whenever the listener is no more interested by the channel's updates\n\t\tstop();\n\t});\n\n});\n```\n\n##Live examples\n\n* [The todo application](http://flams.github.com/olives/todo/index.html) Available on [TodoMVC](http://todomvc.com)\n* [Ideafy by Taiaut](http://www.taiaut.com/taiaut.com/index.php)\n* [Suggestions (Unavailable ATM)]()\n\n## Changelog\n\n####1.4.2 - 10 JUNE 2013\n\n* Fixed performance and memory issues with data-binding's item renderer when using virtualised grid. Check a 1,000,000 rows Grid using Olives data-binding: http://podefr.github.io/olives-virtualised-grid/ \n\n####1.4.1 - 13 MAY 2013\n\n* Improved virtualisation performances in the data binding plugin when used with large data sets (>100,000 items)\n\n####1.4.0 - 24 MAR 2013\n\n* Added Bind.plugin.getItemIndex for getting the index of a foreach generated item in a store\n* Plugins constructor can be called with the list of plugins\n* Updated all documentations\n* SocketIOTransport doesn't initialise the socket anymore, the socket must be given\n\n####1.3.2 - 15 MAR 2013\n\n* Incorporating 1.3.1 changes, tests + docs clean up\n* Updated Emily\n\n####1.3.0 - 17 DEC 2012\n\n * Olives modules are now anonymous. When downloading Olives you can get its source file and decide by yourself how you want to use them/pack them into your application. A standalone file is still available for rapid prototyping.\n * Model-plugin is now called Bind.plugin\n * Transport is now called SocketIOTransport\n * UI-pugin is now called Place.plugin\n * Plugins are now name as \"name.plugin.js\" instead of \"name-plugin.js\"\n * Updated JSDocs\n\n\n\n",
  "_id": "olives@1.4.2",
  "dist": {
    "shasum": "e61060529d77fb607aa0efaf20045be31b784c1b"
  },
  "_from": "olives"
}
