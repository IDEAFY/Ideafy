{
  "name": "nested-property",
  "description": "Read or write an array or object's nested property via a string like 'my.nested.property'",
  "version": "0.0.1",
  "homepage": "https://github.com/cosmosio/nested-property",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/cosmosio/nested-property/master/LICENSE"
    }
  ],
  "files": [
    "LICENSE",
    "index.js"
  ],
  "author": {
    "name": "Olivier Scherrer",
    "email": "pode.fr@gmail.com"
  },
  "keywords": [
    "nested",
    "property",
    "object",
    "array",
    "read",
    "write",
    "get",
    "set"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:cosmosio/nested-property.git"
  },
  "bugs": {
    "url": "https://github.com/cosmosio/nested-property/issues"
  },
  "scripts": {
    "test": "mocha"
  },
  "main": "index.js",
  "devDependencies": {
    "chai": "~1.9.1",
    "mocha": "~1.18.2"
  },
  "readme": "Nested property\n=============\n\nRead or write an array or object's nested property via a string like 'my.nested.property'\n\nInstallation\n============\n\n```bash\nnpm install nested-property\n```\n\nHow to use\n==========\n\nRequire nested-property:\n\n```bash\nvar nestedProperty = require(\"nested-property\");\n```\n\nYou can get a nested property from an object:\n\n```js\nvar object = {\n  a: {\n    b: {\n      c: {\n        d: 5\n      }\n    }\n  }\n};\n\nnestedProperty.get(object, \"a\"); // returns object.a\nnestedProperty.get(object, \"a.b.c\"); // returns object.a.b.c\nnestedProperty.get(object, \"a.b.c.d\"); // returns 5\nnestedProperty.get(object, \"a.d.c\"); // returns undefined\nnestedProperty.get(object); // returns object\nnestedProperty.get(null); // returns null\n```\n\nIt also works through arrays:\n\n```js\nvar array = [{\n  a: {\n    b: [0, 1]\n  }\n  }];\n\nnestedProperty.get(array, \"0\"); // returns array[0]\nnestedProperty.get(array, \"0.a.b\"); // returns array[0].a.b\nnestedProperty.get(array, \"0.a.b.0\"); // returns 0\nnestedProperty.get(array, \"1.a.b.c\"); // returns undefined\n```\n\nYou can set a nested property on an object:\n\n```js\nvar object = {\n  a: {\n    b: {\n      c: {\n        d: 5\n      }\n    }\n  }\n};\n\nnestedProperty.set(object, \"a\", 1); // object.a == 1\nnestedProperty.set(object, \"a.b.c\", 1337); // object.a.b.c == 1337\nnestedProperty.set(object, \"e.f.g\", 1); // object.e.f.g == 1, it creates the missing objects!\nnestedProperty.set(object); // returns object\nnestedProperty.set(null); // returns null\n```\n\nYou can also set a nested property through arrays:\n\n```js\nvar array = [\n {\n   a: [0, 1]\n }\n];\n\nnestedProperty.set(array, \"0.a.0\", 10); // array[0].a[0] == 10\nnestedProperty.set(array, \"0.b.c\", 1337); // array[0].b.c == 1337\n```\n\nCaveat!\n\n```js\nvar object = {};\nnestedProperty.set(object, \"0.1.2\", \"new object\");\n\n// will not create arrays, but objects such as:\n{\n  \"0\": {\n    \"1\": {\n      \"2\": \"new object\"\n    }\n  }  \n}\n```\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "nested-property@0.0.1",
  "_from": "nested-property@0.0.1"
}
