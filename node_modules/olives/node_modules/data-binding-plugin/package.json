{
  "name": "data-binding-plugin",
  "description": "One of the most powerful two way data-binding tool with virtualization. Highly optimized for performance and memory",
  "version": "0.0.5",
  "homepage": "https://github.com/flams/data-binding-plugin",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/flams/data-binding-plugin/master/LICENSE"
    }
  ],
  "files": [
    "LICENSE",
    "index.js"
  ],
  "author": {
    "name": "Olivier Scherrer",
    "email": "pode.fr@gmail.com"
  },
  "keywords": [
    "data",
    "binding",
    "plugin",
    "seam",
    "virtualization",
    "memory",
    "performance"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:flams/data-binding-plugin.git"
  },
  "bugs": {
    "url": "https://github.com/flams/data-binding-plugin/issues"
  },
  "scripts": {
    "test": "jasmine-node test/"
  },
  "main": "index.js",
  "devDependencies": {
    "observable-store": "0.0.3",
    "seam": "0.0.3",
    "jasmine-node": "~1.14.3",
    "quick-dom": "0.0.1"
  },
  "dependencies": {
    "get-nodes": "0.0.1",
    "get-dataset": "0.0.1",
    "compare-numbers": "0.0.1",
    "simple-loop": "0.0.2",
    "nested-property": "0.0.2",
    "watch-notify": "0.0.2",
    "get-closest": "0.0.1",
    "to-array": "~0.1.4"
  },
  "readme": "Data binding\n=============\n\nOne of the most powerful two-way data-binding tools available. It has a bunch of really cool features:\n\n- It can be extended with plugins so that virtually any behavior can be triggered on model update.\n- It can generate DOM elements for you based on a pure HTML template and repeat them to render a list of items.\n- The rendering of lists of items can be virtualized so that not all of the items get rendered, improving performance and memory consumption.\n- It's so fast that it's the perfect tool for mobile devices too.\n- It's extensively tested to prevent memory leaks.\n- It's a [Seam](https://github.com/flams/seam) plugin, so it's easy to use.\n- It even works with SVGs!\n\nLive example\n============\n\nThere's a virtualized grid displaying 1,000,000 items showcased [here](http://podefr.github.io/data-binding-virtualized-grid/)\n\nInstallation\n============\n\n```bash\nnpm install data-binding-plugin\n```\n\nHow to use\n==========\n\ndata-binding-plugin requires three things:\n\n - An observable data store, so that the data-binding plugin can listen to changes events\n - An HTML/SVG template that declares where the data will be rendered\n - [Seam](https://github.com/flams/seam) that will make understand the declarative bindings for data-binding\n\nRequire data-binding-plugin:\n\n```js\nvar DataBinding = require(\"data-binding-plugin\");\n```\n\nThe data-binding plugin binds the data from a model with an HTML view.\n\nInitialize data-binding:\n\n```js\nvar dataBinding = new DataBinding();\n```\n\nGive it a model (an observable-store)\n\n```js\nvar Store = require(\"observable-store\");\nvar store = new Store({\n    name: \"data-binding\"\n});\n```\n\nGive the store to the data-binding plugin:\n\n```js\ndataBinding.setModel(store);\n```\n\nThe data-binding is a Seam plugin, so we need to new up Seam and add the plugin to it:\n\n\n```js\nvar Seam = require(\"seam\");\nvar seam = new Seam();\n\nseam.add(\"bind\", dataBinding);\n```\n\nNow we can define the view. Whenever the name property is updated in the store, the innerHTML property of the DIV element is set with the value.\n\n```html\n<div data-bind=\"bind: innerHTML, name\"> </div>\n```\n\nAnd apply the data-binding plugin to the view.\n\n```js\nseam.apply(document.querySelector('[data-bind]'));\n```\n\nWhen the store is updated, the view will reflect the change:\n\n```js\nstore.set('name', 'data-binding-plugin');\n```\n\nThe data-binding plugin can update any property. This will update the className, which in turn sets the class attribute of the div element.\n\n```html\n<div data-bind=\"bind: className, class\"></div>\n```\n\nOf course, a template can have several bindings:\n\n```html\n<div data-bind=\"bind: className, gender\">\n    <span data-bind=\"bind: innerText, name\"></span>\n    <span data-bind=\"bind: innerText, email\"></span>\n</div>\n```\n\nWe can also have formatter. Instead of giving a className, we can specify a formatter function:\n\n\n```html\n<div data-bind=\"bind: formatDate, date\"></div>\n```\n\nAnd when initializing the plugin, we add it a list of formatters:\n\n```js\nvar dataBinding = new DataBinding(model, {\n    formatDate: function (date) {\n        // this is the dom element\n        this.innerHTML = formatDate(date);\n    }\n});\n```\n\nSeveral parameters can be given to the formatter:\n\n```html\n<div data-bind=\"bind: formatDate, date, BST, ...\"></div>\n```\n\n```js\n...\nformatDate: function(date, timezone, ...) {\n    //...\n}\n...\n```\n\nData-binding plugin can also repeat a template if the model is an array:\n\n```html\n<ul data-bind=\"foreach\">\n    <li>\n        <span data-bind=\"bind: innerText, firstname\"></span>\n        <span data-bind=\"bind: innerText, lastname\"></span>\n    </li>\n</ul>\n```\n\nWith an array-based observable-store:\n\n```js\nvar store = new Store([{\n    firstname: 'Mia',\n    lastname: 'Wallace'\n},\n{\n    firstname: 'John',\n    lastname: 'McLane'\n}]);\n```\n\nAnd when adding/updating/removing an item in the store, the DOM will be updated.\n\nFinally, data-binding plugin comes with a virtualization option which allows you to render only parts of a longer list of items, so that only what's visible is actually rendered to save memory and improve performance:\n\n\n```html\n<ul data-bind=\"foreach: list, 0, 10\">\n    <li>\n        <span data-bind=\"bind: innerText, firstname\"></span>\n        <span data-bind=\"bind: innerText, lastname\"></span>\n    </li>\n</ul>\n```\n\nThis list will render 10 items from index 0, and will be called 'list'. In JavaScript, we can instruct the list to display the next items:\n\n```js\nvar itemRenderer = dataBinding.getItemRenderer('list');\n// start from index 10\nitemRenderer.setStart(10);\n// display 20 items instead of 10\nitemRenderer.setNb(20);\n// rerender the items\nitemRenderer.render();\n```\n\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "data-binding-plugin@0.0.5",
  "dist": {
    "shasum": "1b7f0a31aa997a8c5009633472d0ddeeb51514d1"
  },
  "_from": "data-binding-plugin@0.0.5",
  "_resolved": "https://registry.npmjs.org/data-binding-plugin/-/data-binding-plugin-0.0.5.tgz"
}
