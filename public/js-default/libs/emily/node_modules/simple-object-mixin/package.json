{
  "name": "simple-object-mixin",
  "description": "Simple mixin is the simplest implementation for a mixin, copying an object's properties onto another",
  "version": "0.0.1",
  "homepage": "https://github.com/flams/simple-object-mixin",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/flams/simple-object-mixin/master/LICENSE"
    }
  ],
  "files": [
    "LICENSE",
    "index.js"
  ],
  "author": {
    "name": "Olivier Scherrer",
    "email": "pode.fr@gmail.com"
  },
  "keywords": [
    "mixin",
    "object"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:flams/simple-object-mixin.git"
  },
  "bugs": {
    "url": "https://github.com/flams/simple-object-mixin/issues"
  },
  "scripts": {
    "test": "mocha"
  },
  "main": "index.js",
  "devDependencies": {
    "chai": "~1.9.1",
    "mocha": "~1.18.2"
  },
  "dependencies": {
    "simple-loop": "0.0.2"
  },
  "readme": "Simple object mixin\n=============\n\nSimple mixin is the simplest implementation for a mixin, copying an object's properties onto another. It has an option for specifying if duplicated properties can be replaced or not in the target object.\nUse `https://github.com/WebReflection/object-mixin` instead of this module if you can, it's better to use built-in features or their polyfills.\nIt will not copy the properties from the prototype chain.\n\nInstallation\n============\n\n```bash\nnpm install simple-object-mixin\n```\n\nHow to use\n==========\n\nRequire simple-mixin:\n\n\n```js\nvar mixin = require(\"simple-object-mixin\");\n```\n\nUse it with an array:\n\n```js\nvar objectSource = {\n  \"b\": 30,\n  \"c\": 40\n};\n\nvar objectDestination = {\n  \"a\": 10,\n  \"b\": 20\n};\n\nvar returnedObject = mixin(objectSource, objectDestination);\n\nreturnedObject === objectDestination;\nJSON.stringify(objectDestination); //{\"a\":10,\"b\":\"30\", \"c\":40}\n```\n\nBy default, the properties from source are copied onto destination. If there's a duplicated property, it will be replaced. If you don't want the new value to override the existing value, you can use the dontOverride option:\n\n```js\nvar returnedObject = mixin(objectSource, objectDestination, true /* don't override */);\n\nreturnedObject === objectDestination;\nJSON.stringify(objectDestination); //{\"a\":10,\"b\":\"20\", \"c\":40} the value for \"b\" will be preserved\n```\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "simple-object-mixin@0.0.1",
  "_from": "simple-object-mixin@0.0.1"
}
