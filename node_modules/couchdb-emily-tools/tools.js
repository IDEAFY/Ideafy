/**
 * @license https://github.com/flams/CouchDB-emily-tools
 * The MIT License (MIT)
 * Copyright (c) 2012-2014 Olivier Scherrer <pode.fr@gmail.com>
 */

var http = require("http"),
        qs = require("querystring"),
        cookie = require("cookie"),
        emily = require("emily"),
        Observable = emily.Observable,
        CouchDBTools = require("./src/CouchDBTools"),
        follow = require("follow");

var configuration = {
        hostname: "localhost",
        port: 5984,
        cookieID: 'ideafy.sid',
        auth: "admin:innovation4U"
        },
        feeds = {},
        initFeed,
        handler,
        changeHandler,
        observer = new Observable();



handler = function (data, onEnd, onData) {

        var req = {},
                isAborted = false;

        data.hostname = configuration.hostname;
        data.port = configuration.port;
        data.path += "?" + qs.stringify(data.query);

        var exec = function () {
                req = http.request(data, function (res) {

                        var body = "";

                        res.on("data", function (chunk) {
                                onData && onData(chunk);
                                body += chunk;
                        });

                        res.on("end", function () {
                                onEnd(body);
                        });
                });

                req.end(data.data, "utf8");
        };

        if (data.handshake && configuration.cookieID) {

                var cookieJSON = cookie.parse(data.handshake.headers.cookie);

                // I don't like the split but is there a better solution?
                configuration.sessionStore.get(cookieJSON[configuration.cookieID].split("s:")[1].split(".")[0], function (err, session) {
                        if (err) {
                                throw new Error(err);
                        } else {
                                if (!isAborted) {
                                        data.auth = session.auth;
                                        exec();
                                } else {
                                        // do nothing!
                                }

                        }
                });
        } else {
                exec();
        }

        return function () {
                isAborted = true;
                req.abort && req.abort();
        };
};

changeHandler = function(payload, onEnd, onData) {

    initFeed(payload.path);
    observer.watch(payload.path, function(data){
            onData(data);
    });
};

initFeed = function(path){
        var feed, url, query;
        console.log(feeds);
        if (feeds[path]) return true;
        else{
                url = "http://" + configuration.auth + "@" + configuration.hostname + ":" + configuration.port + path;
                console.log(url);
                
                query = {
                        db : url,
                        feed: "continuous",
                        heartbeat: 20000
                };
                
                feeds[path] = new follow.Feed(query);
                
                feeds[path].on('change', function(data){
                        observer.notify("path", data);
                });
                
                feeds[path].on('error', function(err){
                        throw err;
                });
                
                return feeds[path].follow();
         }
};

module.exports = emily.Tools.mixin(CouchDBTools, {
        handler: handler,
        changeHandler: changeHandler,
        configuration: configuration
});