{
  "name": "watch-notify",
  "description": "The omnipresent publish subscribe design pattern.",
  "version": "0.0.2",
  "homepage": "https://github.com/flams/watch-notify",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/flams/watch-notify/master/LICENSE"
    }
  ],
  "files": [
    "LICENSE",
    "index.js"
  ],
  "author": {
    "name": "Olivier Scherrer",
    "email": "pode.fr@gmail.com"
  },
  "keywords": [
    "publish",
    "subscribe",
    "watch",
    "notify",
    "observable",
    "observer"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:flams/watch-notify.git"
  },
  "bugs": {
    "url": "https://github.com/flams/watch-notify/issues"
  },
  "scripts": {
    "test": "jasmine-node test/"
  },
  "main": "index.js",
  "devDependencies": {
    "jasmine-node": "~1.14.3"
  },
  "dependencies": {
    "simple-loop": "0.0.2",
    "to-array": "~0.1.4"
  },
  "readme": "Watch notify\n=============\n\nThe omnipresent publish subscribe design pattern. The observers are called in the same order that they are added. If an observer throws an error when executed, the exception is caught and the execution continue to the next one.\n\nInstallation\n============\n\n```bash\nnpm install watch-notify\n```\n\nHow to use\n==========\n\nRequire and initialize watch-notify:\n\n```js\nvar watchNotify = require(\"watch-notify\");\n\nvar watchNotify = new WatchNotify();\n```\n\nWatch on a specific topic:\n\n```js\nvar handle = watchNotify.watch(\"topic\", function handler(message) {\n  // this === scope\n}, scope /* optional */);\n```\n\nThe topic can also be a number:\n\n```js\nvar handle = watchNotify.watch(1337, function handler() { ... });\n```\n\nNotify on a specific topic:\n\n```js\nwatchNotify.notify(\"topic\", \"hi!\");\n```\n\nSeveral types can be given to notify:\n\n```js\nwatchNotify.notify(\"topic\", \"message1\", \"message2\", anObject, ...);\n```\n\nRemove an observer:\n\n```js\nwatchNotify.unwatch(handle);\n```\n\nObserve only once. The handler will be called once and then removed, so any new message on `topic` won't trigger it.\n\n```js\nvar handle = watchNotify.once(\"topic\", function handler() { ... });\n```\n\nRemove the handler before it's even called for the first time:\n\n```js\nwatchNotify.unwatch(handle);\n```\n\n\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "watch-notify@0.0.2",
  "_from": "watch-notify@0.0.2"
}
