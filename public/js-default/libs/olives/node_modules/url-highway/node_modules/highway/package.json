{
  "name": "highway",
  "description": "A simple and multi-purpose router.",
  "version": "0.0.2",
  "homepage": "https://github.com/cosmosio/highway",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/cosmosio/highway/master/LICENSE"
    }
  ],
  "files": [
    "LICENSE",
    "index.js"
  ],
  "author": {
    "name": "Olivier Scherrer",
    "email": "pode.fr@gmail.com"
  },
  "keywords": [
    "router",
    "history"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:cosmosio/highway.git"
  },
  "bugs": {
    "url": "https://github.com/cosmosio/highway/issues"
  },
  "scripts": {
    "test": "jasmine-node test/"
  },
  "main": "index.js",
  "devDependencies": {
    "jasmine-node": "~1.14.3"
  },
  "dependencies": {
    "watch-notify": "0.0.2",
    "to-array": "~0.1.4"
  },
  "readme": "highway\n=============\n\nA simple and multi-purpose router with history management.\n\nInstallation\n============\n\n```bash\nnpm install highway\n```\n\nHow to use\n==========\n\nRequire and initialize highway:\n\n```js\nvar Highway = require(\"highway\"),\n  highway = new Highway();\n```\n\nAdd a route:\n\n```js\nvar handle = highway.set(\"route\", function routeHandler() {\n    // Do something when navigating to route\n    // this === scope;\n}, scope /* optional */);\n```\n\nRemove a route :\n\n```js\nhighway.unset(handle);\n```\n\nNavigate to a route:\n\n```js\n// this will call the handler that's defined for route with all of the following params\nhighway.navigate(\"route\", \"param1\", \"param2\", {}, ...);\n```\n\nWatch for route changes:\n\n```js\nvar handle = highway.watch(function routeChangeHandler(newRoute, param1, param2, ...) {\n    // newRoute is the route that we navigated to\n    // scope === this;\n}, scope /* optional */);\n```\n\nStop watching for route changes:\n\n```js\nhighway.unwatch(handle);\n```\n\nNavigate in the history:\n\n```\n// Go back in the history, we reload the previous route with the same params.\nhighway.back();\n\n// Go forward\nhighway.forward();\n\n// Go back 3 times\nhighway.go(-3);\n\n// Go forward 2 times\nhighway.get(-2);\n```\n\nIncrease the saved history (10 by default):\n\n```js\n// Save the last 100 routes\nhighway.setMaxHistory(100);\n```\n\nclear history\n\n```js\nhighway.clearHistory();\n```\n\nHow to extend?\n==============\n\nThis a very simple router. You can build on top it if you want it to be URL based for instance:\n\n```js\nfunction URLRouter() {\n  var highway = new Highway();\n\n  function getRouteFromUrl(url) { return ... }\n  function getParamsFromUrl(url) { return ... }\n\n  this.navigate = function (url) {\n      var route = getRouteFromUrl(url),\n        params = getParamsFromUrl(url);\n\n      highway.navigate.apply(highway, route, params);\n  };\n\n  ...\n}\n```\n\nYou could also bind it to hashchange:\n\n```js\nfunction HashRouter() {\n  var highway = new Highway();\n\n  function getRouteFromHash(hash) { return ... }\n  function getParamsFromHash(hash) { return ... }\n\n  window.addEventListener(\"hashchange\", function () {\n      var route = getRouteFromHash(window.location.hash),\n        params = getParamsFromHash(window.location.hash);\n\n      highway.navigate.apply(highway, route, params);\n  }, true);\n\n  ...\n}\n```\n\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "highway@0.0.2",
  "_from": "highway@0.0.2"
}
