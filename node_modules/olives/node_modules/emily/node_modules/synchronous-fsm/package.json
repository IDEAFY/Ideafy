{
  "name": "synchronous-fsm",
  "description": "A synchronous FSM that triggers events when entering or leaving a state",
  "version": "0.0.3",
  "homepage": "https://github.com/flams/synchronous-fsm",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/flams/synchronous-fsm/master/LICENSE"
    }
  ],
  "files": [
    "LICENSE",
    "index.js"
  ],
  "author": {
    "name": "Olivier Scherrer",
    "email": "pode.fr@gmail.com"
  },
  "keywords": [
    "state",
    "states",
    "statemachine",
    "machine",
    "fsm",
    "finite",
    "transtion",
    "transitions"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:flams/synchronous-fsm.git"
  },
  "bugs": {
    "url": "https://github.com/flams/synchronous-fsm/issues"
  },
  "scripts": {
    "test": "jasmine-node test/"
  },
  "main": "index.js",
  "devDependencies": {
    "jasmine-node": "~1.14.3"
  },
  "dependencies": {
    "to-array": "~0.1.4",
    "simple-loop": "0.0.2"
  },
  "readme": "Synchronous finite state machine\n=============\n\nA synchronous FSM that also triggers events when entering or leaving a state.\n\nInstallation\n============\n\n```bash\nnpm install synchronous-fsm\n```\n\nHow to use\n==========\n\nRequire synchronous-fsm:\n\n```js\nvar FSM = require(\"synchronous-fsm\");\n```\n\nTo initialize the statemachine we need to define states and transitions first:\n\n```js\nvar states = {\n  // It has an 'opened' state\n  \"opened\": [\n      // That accepts a 'pass' event that will execute the 'pass' action\n      [\"pass\", function onPass(event) {\n          passCalled = event;\n      // And when done, it will transit to the 'closed' state\n      }, \"closed\"],\n\n      // It also has a 'action' event that doesn't trigger a transition\n      [\"coin\", function onCoin(event) {\n          console.log(\"thanks\");\n      }]\n  ],\n\n  // It also has a 'closed' state\n  \"closed\": [\n      // That accepts a 'coin' event that will execute the 'coin' action\n      [\"coin\", function coin(event) {\n          coinCalled = event;\n      // And when done, it will transit back to the 'opened' state\n      }, \"opened\"]\n  ]\n};\n```\n\nThen we can initialize the state machine in the desired state:\n\n```js\n// Initialize in the \"opened\" state\nvar fsm = new FSM(\"opened\", states);\n```\n\nTrigger a transition:\n\n```js\n// Will transit to \"closed\", executing the onPass handler\nfsm.event(\"pass\");\n\n// Could also transit with some data that will be received by the handler\nfsm.event(\"pass\", \"6km/h\", \"8:30pm\");\n```\n\nGet the current state:\n\n```js\nfsm.getCurrent(); // opened\n```\n\nCan also be directly advanced to a given state:\n\n```js\nfsm.advance(\"closed\"); // will move the state machine to this state\n```\n\nThe stateMachine also triggers an \"entry\" and an \"exit\" event when entering and leaving a state. Simply add the handlers like for any other event:\n\n```js\nvar states = {\n  // It has an 'opened' state\n  \"opened\": [\n      ...\n\n      // This handler will be called when entering the state\n      [\"entry\", function onEntry(event) {\n          console.log(\"entering state...\");\n      }],\n\n      // This handler will be called when leaving the state\n      [\"exit\", function onExit(event) {\n          console.log(\"leaving state...\");\n      }],\n  ],\n\n  // It also has a 'closed' state\n  \"closed\": [\n      ...\n  ]\n};\n```\n\n\n\n\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "synchronous-fsm@0.0.3",
  "dist": {
    "shasum": "2eeed7b38ab73c5f10a3d4aef9fc2dfae169eae5"
  },
  "_from": "synchronous-fsm@0.0.3",
  "_resolved": "https://registry.npmjs.org/synchronous-fsm/-/synchronous-fsm-0.0.3.tgz"
}
