{
  "name": "socketio-transport",
  "description": "socketio-transport will allow you to define request handlers on the server side and to access them from the client side.",
  "version": "0.0.4",
  "homepage": "https://github.com/cosmosio/socketio-transport",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/cosmosio/socketio-transport/master/LICENSE"
    }
  ],
  "files": [
    "LICENSE",
    "index.js",
    "server",
    "client"
  ],
  "author": {
    "name": "Olivier Scherrer",
    "email": "pode.fr@gmail.com"
  },
  "keywords": [
    "transport",
    "request",
    "handlers",
    "listen",
    "socket.io",
    "socketio",
    "server",
    "client"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:cosmosio/socketio-transport.git"
  },
  "bugs": {
    "url": "https://github.com/cosmosio/socketio-transport/issues"
  },
  "scripts": {
    "test": "jasmine-node test/"
  },
  "main": "index.js",
  "browser": "browser/index.js",
  "devDependencies": {
    "watch-notify": "0.0.2",
    "jasmine-node": "~1.14.3"
  },
  "dependencies": {},
  "readme": "#Socketio-transport\n\nsocketio-transport will allow you to define request handlers (file, DB, ...) on the server side and to access them from the client side.\n\n#Installation\n\n```bash\nnpm install socketio-transport\n```\n\n#How to use\n\nsocketio-transport has a client-side and a server-side part, just like socket.io which it's based upon. It'll just wrap socket.io to provide a nice abstraction to make requests and open channels from the client side.\n\n## Wrap the server side and define handlers\n\nRequire the server part of socketio-transport:\n\n```js\nvar transport = require(\"socketio-transport\").Server;\n```\n\nAnd define you request handlers:\n\n```js\nvar handlers = {\n    /**\n     * payload is a JSON sent by the client\n     * onData is the callback that will receive each update\n     * onEnd will be called with the last update\n     */\n    test: function (payload, onEnd, onData) {\n        setInterval(function () {\n            onData((new Date));\n        }, 200);\n    }\n}\n```\n\nThen register the socket.io that you want to use and add the handlers too. The handlers need to be wrapped in an observable-store, because they can be shared between several `transports` and they will know when handlers are added/removed/updated if needed.\n\n```js\n// the socket.io\nvar io = require(\"socket.io\").listen(8000);\n\n// The observable-store to wrap the handlers\nvar Store = require(\"observable-store\");\n\n// register socket.io and the handlers:\nsocketioTransport(io, new Store(handlers));\n```\n\n## Wrap the client side and query the handlers\n\nRequire the client part of socketio-transport\n\n```js\nvar SocketioTransport = require(\"socketio-transport\").Client;\n```\n\nInitialize it with the socket.io that you want to use:\n\n```js\nvar transport = new SocketioTransport(io.connect(\"http://localhost:8000\"));\n```\n\nAnd you're now free to query your request handlers:\n\n```js\ntransport.listen(\"test\", { ...}, function onData(data) {\n    // do something with data\n    console.log(data); // Date, triggered every 200ms\n});\n```\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "socketio-transport@0.0.4",
  "dist": {
    "shasum": "497b942ce588f62cc543e931377678a223c7ff0a"
  },
  "_from": "socketio-transport@",
  "_resolved": "https://registry.npmjs.org/socketio-transport/-/socketio-transport-0.0.4.tgz"
}
